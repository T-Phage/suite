
# PREREFERNCE = [('delete','delete'),
#                ('removed','remove')]
# class Task(models.Model):
#     id = models.AutoField(primary_key=True)
#     task_name = models.CharField(max_length=100, primary_key=True,)
#     assigner = models.ForeignKey(MyUser, null=True, on_delete=models.SET_NULL)
#     created_at = models.DateTimeField(auto_now_add=True)
#     preference = models.CharField(max_length=7, null=True, )

#     def __str__(self):
#         return str(self.task_name)
    
#     class Meta:
#         ordering = ['-created_at']

# class Site(models.Model):
#     id = models.AutoField(primary_key=True)
#     site_name = models.CharField(max_length=200)
#     site_id = models.CharField(max_length=200, unique=True)
#     description = models.TextField()
#     site_visibilty = models.CharField(max_length=10,)
#     created_at = models.DateTimeField(auto_now_add=True)

#     created_by = models.ForeignKey(MyUser, null=True, on_delete=models.SET_NULL,)

#     def __str__(self):
#         return str(self.site_name)
    
#     class Meta:
#         ordering = ['-id']

 
# class Folder(models.Model):
#     id = models.AutoField(primary_key=True)
#     folder_name = models.CharField(max_length=255)
#     created_on = models.DateTimeField(auto_now_add=True)
#     is_rep = models.BooleanField(default=True)
#     department = models.ForeignKey(Department, blank=True, null=True, on_delete=models.SET_NULL)
#     faculty = models.ForeignKey(Faculty, blank=True, null=True, on_delete=models.SET_NULL)
#     created_by = models.ForeignKey(MyUser, null=True, on_delete=models.SET_NULL)
#     main_folder = models.ForeignKey('self', blank=True, null=True, on_delete=models.CASCADE)
#     site = models.ForeignKey(Site, blank=True, null=True, on_delete=models.CASCADE)

#     def __str__(self):
#         return str(self.folder_name)
        
#     class Meta:
#         ordering = ['-folder_id']


# class File(models.Model):
#     id = models.AutoField(primary_key=True)
#     uploaded_by = models.ForeignKey(MyUser, null=True, blank=True, on_delete=models.SET_NULL)
#     filepath = models.FileField(upload_to='files/', blank=True, )
#     uploaded_at = models.DateTimeField(auto_now_add=True,  blank=True,)
#     department = models.ForeignKey(Department, null=True, blank=True, on_delete=models.SET_NULL,)
#     faculty = models.ForeignKey(Faculty,null=True, blank=True, on_delete=models.SET_NULL, )
#     is_rep = models.BooleanField(default=False, blank=True,)
#     folder = models.ForeignKey(Folder,null=True, blank=True, on_delete=models.CASCADE)
#     # is_task = models.BooleanField(default=False, blank=True,)
#     task_name = models.ForeignKey(Task, null=True, blank=True, on_delete=models.CASCADE)
#     site = models.ForeignKey(Site, blank=True, null=True, on_delete=models.CASCADE) 
#     update = models.ForeignKey('self', blank=True, null=True, on_delete=models.CASCADE)
    
#     def __str__(self):
#         return str(self.filepath)  # + ":" + str(self.filepath)

#     def last_10_files(self):
#         return File.objects.order_by('file_id').all()

#     def display_text_file(self):
#         with open(self.filepath.path) as fp:
#             return fp.read().replace('\n', '<br>')
            
#     class Meta:
#         ordering = ['-id']


# PRIO_CHOICES = [('High', 'High'),
#                 ('Medium', 'Medium'),
#                 ('Low', 'Low')]
# class TaskDetail(models.Model):
#     id = models.AutoField(primary_key=True)
#     task = models.ForeignKey(Task, null=True, blank=True, on_delete=models.CASCADE)
#     priority = models.CharField(blank=True, null=True, max_length=7, choices=PRIO_CHOICES,)
#     due_date = models.DateField(blank=True, null=True,)
#     due_time = models.TimeField(blank=True, null=True,)
#     assignee = models.ForeignKey(MyUser, null=True, blank=True, on_delete=models.CASCADE)
#     faculty = models.ForeignKey(Faculty, null=True, blank=True, on_delete=models.CASCADE)
#     department = models.ForeignKey(Department, null=True, blank=True, on_delete=models.CASCADE)
#     comment = models.TextField(blank=True, null=True, )
    
#     def __str__(self):
#         return str(self.task)

#     class Meta:
#         ordering = ['-id']

# ROLE_CHOICE = [('---------', '---------'),
#                ('manager', 'manager'),
#                ('collaborator', 'collaborator'),
#                ('contributor', 'contributor'),
#                ('consumer', 'consumer'),]
# class SiteUser(models.Model):
#     id = models.AutoField(primary_key=True)
#     site = models.ForeignKey(Site, blank=True, null=True, on_delete=models.CASCADE) 
#     user = models.ForeignKey(MyUser,blank=True, null=True, on_delete=models.CASCADE)
#     role = models.CharField(max_length=15, default='consumer', blank=True, choices=ROLE_CHOICE, )

#     def __str__(self):
#         return str(self.site)


# NOTE_OPTION = [('notification','notification'),
#                ('activity', 'activity')]
# class Notification(models.Model):
#     id = models.AutoField(primary_key=True)
#     user = models.ForeignKey(MyUser, blank=True, on_delete=models.CASCADE, null=True)
#     action = models.CharField(max_length=255, null=True, blank=True, choices=NOTE_OPTION,)
#     note = models.CharField(max_length=255, blank=True, default="",)
#     url = models.CharField(max_length=255, blank=True, null=True, default="")
#     action_time = models.DateTimeField(auto_now_add=True, null=True)
    
#     def __str__(self):
#         return str(self.action)
        
#     class Meta:
#         ordering = ['-id']


# STATUS = [('in_progress', 'in_progress'),
#         ('completed', 'completed')]
# class TaskStatus(models.Model):
#     id = models.AutoField(primary_key=True)
#     taskdetail = models.ForeignKey(TaskDetail, on_delete=models.CASCADE)
#     status = models.CharField(max_length=20, choices=STATUS)
#     feedback = models.TextField()
#     assignee_user = models.ForeignKey(MyUser, null=True, on_delete=models.CASCADE)
    
#     def __str__(self):
#         return str(self.taskdetail)